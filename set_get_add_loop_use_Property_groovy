**********************loop / get / set / add / remove property************************
***loop all properties
testRunner.testCase.properties.each
{
   key, value ->
   log.info (testRunner.testCase.get.getPropertyValue(key))   //cestu najdeme nize dle typu property
   log.info (key+" - "+value)
}

***GET
def TC = testRunner.testCase.testSuite.project.getTestSuiteByName("Resource Manger (SRM)").getTestCaseByName("SRMTestCase")
//Project
def projectProp = testRunner.testCase.testSuite.project.getPropertyValue("Name")
log.info ("Project Property = "+projectProp)
//TestSuite
def testSuiteProp = testRunner.testCase.testSuite.getPropertyValue("Name")
log.info ("Project Property = "+testSuiteProp)
//TestCase
def testCaseProp = testRunner.testCase.getPropertyValue("Name")
log.info ("Project Property = "+testCaseProp)
//TestStep
def projectProp = testRunner.testCase.getTestStepByName("CountryCodes").getPropertyValue("Name")
log.info ("Project Property = "+projectProp)
//Global
def globalProperty = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Name")
log.info ("Project Property = "+globalProperty)
***SET - with changing values************************************
//Project
testRunner.testCase.testSuite.project.setPropertyValue("Name", "Project Property works")
log.info ("Project Property = "+projectProp OR testRunner.testCase.testSuite.project.getPropertyValue("Name"))
//TestSuite
testRunner.testCase.testSuite.setPropertyValue("Name", "TestSuite Property works")
log.info ("Project Property = "+testSuiteProp)
//TestCase
testRunner.testCase.setPropertyValue("Name", "TestCase Property works")
log.info ("Project Property = "+testCaseProp)
//TestStep
testRunner.testCase.setTestStepByName("CountryCodes").getPropertyValue("Name", "TestStep Property works")
log.info ("Project Property = "+projectProp)
//Global
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Name", "Global Property works")
log.info ("Project Property = "+globalProperty)
***set + add + remove***********************************************************
//Project
testRunner.testCase.testSuite.project.setPropertyValue("Name", "Project Property works")
log.info ("Project Property = "+projectProp OR testRunner.testCase.testSuite.project.getPropertyValue("Name"))

testRunner.testCase.testSuite.project.setPropertyValue("Name2", "Project Property works")
testRunner.testCase.testSuite.project.removePropertyValue("Name2", "Project Property works")

//TestSuite
testRunner.testCase.testSuite.setPropertyValue("Name", "TestSuite Property works")
log.info ("Project Property = "+testSuiteProp)

testRunner.testCase.testSuite.setPropertyValue("Name2", "Project Property works")
testRunner.testCase.testSuite.removePropertyValue("Name2", "Project Property works")

//TestCase
testRunner.testCase.setPropertyValue("Name", "TestCase Property works")
log.info ("Project Property = "+testCaseProp)

testRunner.testCase.setPropertyValue("Name2", "Project Property works")
testRunner.testCase.removePropertyValue("Name2", "Project Property works")

//TestStep
testRunner.testCase.setTestStepByName("CountryCodes").getPropertyValue("Name", "TestStep Property works")
log.info ("Project Property = "+projectProp)

testRunner.testCase.setTestStepByName("CountryCodes").addPropertyValue("Name2", "TestStep Property works")
testRunner.testCase.setTestStepByName("CountryCodes").removePropertyValue("Name2", "TestStep Property works")

//Global
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Name", "Global Property works")
log.info ("Project Property = "+globalProperty)

****************************************************************************************************************
****************************************************************************************************************
**********************USING PROPERTIES**************************************************************************
****************************************************************************************************************
****************************************************************************************************************
***in request
normal                                    absolute 
${#Project#CountryName}                   ${#Project#CountryName} 
${TestSuite#CountryName}                  ${#TestSuite#CountryName}
${TestCase#CountryName}                   ${#TestCase#CountryName}
//property test step
${property#CountryName}                   ${#property#CountryName}
${Global#CountryName}                     ${#Global#CountryName}
***in groovy script
def name = context.expand('${Project#Name}')  //zde zase dodam string co davam do ***in request
def name = context.expand('${System#user.home}') //vyjde mi adresa usera na kompu C:\User\NAME_OF_AD_ACCOUNT
def name = context.expand('${Env#MAVEN_HOME}') //vyjde mi adresa mavenu na kompu C:\Program Files\apache-maven-3.5.2
****************************************************************************************************************
****************************************************************************************************************
**********************PROPERTY TRANSFER REST********************************************************************
****************************************************************************************************************
****************************************************************************************************************
***TRANSFER ACCOUNT NUMBER
//Source: Request1 --Property as Response1
//Target: Request2--property as Request2

//Response1
{
   "transactionDetails":    {
      "startRow": "1",
      "endRow": "400",
      "totalRow": "1",
      "timeZone": "EST"
   },
   "invoiceNodeDetails":    {
      "nodeLabel": "mx",
      "hierarchyPointId": "16760",
      "nodeStartDate": "20170419 01:40:35",
      "sequenceNumber": "982475",
      "updateDate": "20170419 01:40:35",
      "nodeCreateDate": "20170420 07:47:13",
      "account1Number": "8290000000682"
   },
   "orderDetails": {"serviceOrderNumber": "MX-EUAM-31734"}
}
//Request2
{
      "customerDefinedGroupNodeDetails": {
         "parentInvoiceHierarchyPointId": "155346355",
         "startDate": "20170419 01:40:35",
         "customerDefinedGroupId": "000011",
         "customerAdminId": "",
         "label": "&cadmxprs&",
         "legacyIdTypeCode": "G"
      },
      "userDetails": {
         "userId": "DK246Q",
         "accountNumber": "8290000000682",
         "accountToNumber": "",
         "customerName": "WalGreen",
         "activity": "&Description provided by UI&"
      }
   }

***SOLUTION1 in groovy assertion in 1th req
assert context.response, 'Response is empty or null'
def json = new groovy.json.JsonSlurper().parseText(context.response)   
context.testCase.setPropertyValue('ACCOUNT_NO', json.invoiceNodeDetails.account1Number.toString()) //json.NAME_OF_LIST.NAME_OF_ELEMENT.toString()

//In the second request use Property Transfer ${#TestCase#ACCOUNT_NO}

**************************conditional get**********************************
//prakticky pokud je hodnota firsth, pak bude prvni, pokud ne, tak druha
${= testCase.getPropertyValue( "selection" ) == "first" ? testCase.getPropertyValue( "FirstXML" ) : testCase.getPropertyValue( "SecondXML" )}
