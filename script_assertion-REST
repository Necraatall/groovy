/***********************************************************************************************************************************
*********************************************Validation of response/request*********************************************************
*****************************for json path using JSONPath Finder chrome extension (xpath/jsonPath)**********************************
************************************************************************************************************************************/

//Validate response nodes REST
import groovy.json.JsonSlurper

def headers =  messageExchange.getResponseHeaders()
assert ['HTTP/1.1 200 OK'] == headers["#status#"] : "Test Case HTTP Erorr: " + headers["#status#"]
log.info "Header status" + headers["#status#"]

// Server validation  - IF needet delete /* before code and */  afther code
/*
assert ["BIS6.5.2SP35"] == headers["Server"] : "Test Case Server Erorr: " + headers["Server"]
log.info "Server: " +  headers["Server"]
*/

//check for attachments
assert messageExchange.responseAttachments.length == 0 : "Response Attachments is not NULL" 
log.info "Number of atachments " + (messageExchange.responseAttachments.length)

//Validate response nodes REST
//def requestMessage = message.Exchange.response.responseContent
def responseMessage = messageExchange.response.responseContent
def json = new JsonSlurper().parseText(responseMessage)

//assert node values
assert json.response.responseHeader.toString() != null : "responseHeader is empty: " + json.response.responseHeader   //validation on responseHeader is not empty
log.info "responseHeader is: " +  json.response.responseHeader
assert json.response.responseHeader.providerId.toString() != null : "providerId is empty: " + json.response.responseHeader.providerId    //validation on providerId is not empty
log.info "providerId is: " +  json.response.responseHeader.providerId
assert json.response.responseHeader.messageId.toString() != null : "messageId is empty: " +  json.response.responseHeader.messageId		 //validation on messageId is not empty
log.info "messageId is: " +  json.response.responseHeader.messageId
assert json.response.responseHeader.timestamp.toString() != null : "timestamp is empty: " +  json.response.responseHeader.timestamp		 //validation on timestamp is not empty
log.info "timestamp is: " +  json.response.responseHeader.timestamp
assert json.response.responseBody.toString() != null : "responseBody is empty: " + json.response.responseBody   //validation on responseBody is not empty
log.info "responseBody is: " +  json.response.responseBody
assert json.response.responseBody.returnCode.toString() == "0" : "returnCode is not 0: " +  json.response.responseBody.returnCode		 //validation on returnCode is not empty
log.info "returnCode is: " +  json.response.responseBody.returnCode
assert json.response.responseBody.returnMessage.toString() == "Message Accepted" : "returnCode is not 'Message Accepted': " +  json.response.responseBody.returnMessage		 //validation on returnMessage is not empty
log.info "returnMessage is: " +  json.response.responseBody.returnMessage


// some other thing
/*
testStepName = messageExchange.modelItem.testStep.name                //to get the Test Step Name
log.info testStepName
xmlHold = messageExchange.responseContentAsXml.toString()             //to store the response as Xml
*/
